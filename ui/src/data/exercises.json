[
  {
    "id": 1,
    "name": "Сумма числа",
    "complexity": "basic",
    "description": "Напишите функцию sum, возвращающую сумму a и b",
    "code": "",
    "test": "const evalCode = `${code}; return sum(a, b)`;\nconst sum = new Function('a', 'b', evalCode).bind({});\ndescribe(\"sum\", () => {\n\tit(\"складывает 1 и 1\", () => {\n\t\tassert.equal(sum(1, 1), 2);\n\t});\n});\ndescribe(\"sum\", () => {\n\tit(\"складывает 2 и 3\", () => {\n\t\tassert.equal(sum(2, 3), 5);\n\t});\n});\ndescribe(\"sum\", () => {\n\tit(\"складывает 1 и 9\", () => {\n\t\tassert.equal(sum(1, 9), 10);\n\t});\n});describe(\"sum\", () => {\n\tit(\"складывает 5 и 9\", () => {\n\t\tassert.equal(sum(5, 9), 14);\n\t});\n});"
  },
  {
    "id": 2,
    "name": "Чётное/Нечётное",
    "complexity": "basic",
    "description": "Напишите функцию isEven, возвращающую true, если число num - чётное, и false, если num - нечётное",
    "code": "",
    "test":  "const evalCode = `${code}; return isEven(num)`;\nconst isEven = new Function('num', evalCode).bind({});\ndescribe(\"isEven\", () => {\n\tit(\"при num = 1 вернуть false\", () => {\n\t\tassert.equal(isEven(1), false);\n\t});\n});describe(\"isEven\", () => {\n\tit(\"при num = 2 вернуть true\", () => {\n\t\tassert.equal(isEven(2), true);\n\t});\n});describe(\"isEven\", () => {\n\tit(\"при num = 3 вернуть false\", () => {\n\t\tassert.equal(isEven(3), false);\n\t});\n});describe(\"isEven\", () => {\n\tit(\"при num = 4 вернуть true\", () => {\n\t\tassert.equal(isEven(4), true);\n\t});\n});"
  },
  {
    "id": 3,
    "name": "Минимальное значение",
    "complexity": "basic",
    "description": "Напишите функцию min, принимающую два аргумента, и возвращающую минимальный из них.",
    "code": "",
    "test": ""
  },
  {
    "id": 4,
    "name": "Факториал числа n!",
    "complexity": "basic",
    "description": "Напишите функцию factorial(n), которая возвращает факториал числа n!, используя рекурсивный вызов.",
    "code": "",
    "test": ""
  },
  {
    "id": 5,
    "name": "Вывод чисел каждые 100 мс",
    "complexity": "medium",
    "description": "Напишите функцию printNumbersInterval(), которая последовательно выводит в консоль числа от 1 до 20, с интервалом между числами 100 мс. То есть, весь вывод должен занимать 2000 мс, в течение которых каждые 100 мс в консоли появляется очередное число.",
    "code": "",
    "test": ""
  },
  {
    "id": 6,
    "name": "Первый символ - заглавный",
    "complexity": "medium",
    "description": "Напишите функцию ucFirst(str), которая возвращает строку str с заглавным первым символом.",
    "code": "",
    "test": ""
  },
  {
    "id": 7,
    "name": "Фильтрация массива 'на месте'",
    "complexity": "hard",
    "description": "Создайте функцию filterRangeInPlace(arr, a, b), которая получает массив с числами arr и удаляет из него все числа вне диапазона a..b. То есть, проверка имеет вид a ≤ arr[i] ≤ b. Функция должна менять сам массив и ничего не возвращать.",
    "code": "",
    "test": ""
  }
]
