[
  {
    "id": 1,
    "name": "Сумма числа",
    "complexity": "basic",
    "description": "Напишите функцию sum, возвращающую сумму a и b",
    "code": "",
    "test": "const evalCode = `${code}; return  sum(a,b)`;\nconst sum = new Function('a', 'b', evalCode).bind({});\ndescribe(\"sum\", ()=>{function sumTest(a,b) {let result; result=a+b;it('при a = ' + a + ' и b = ' + b + ', сумма ' + result,()=>{assert.equal(sum(a,b), result);});} for(let a = -1; a <= 1; a++) {for(let b = -1; b <= 1; b++){ sumTest(a,b);}}});"
  },
  {
    "id": 2,
    "name": "Чётное/Нечётное",
    "complexity": "basic",
    "description": "Напишите функцию isEven, возвращающую true, если число num - чётное, и false, если num - нечётное",
    "code": "",
    "test": "const evalCode = `${code}; return isEven(num)`;\nconst isEven = new Function('num', evalCode).bind({});\ndescribe(\"isEven\", () => {\n\tit(\"при num = 1 вернуть false\", () => {\n\t\tassert.equal(isEven(1), false);\n\t});\n});describe(\"isEven\", () => {\n\tit(\"при num = 2 вернуть true\", () => {\n\t\tassert.equal(isEven(2), true);\n\t});\n});describe(\"isEven\", () => {\n\tit(\"при num = 3 вернуть false\", () => {\n\t\tassert.equal(isEven(3), false);\n\t});\n});describe(\"isEven\", () => {\n\tit(\"при num = 4 вернуть true\", () => {\n\t\tassert.equal(isEven(4), true);\n\t});\n});"
  },
  {
    "id": 3,
    "name": "Минимальное значение",
    "complexity": "basic",
    "description": "Напишите функцию min, принимающую два аргумента, и возвращающую минимальный из них.",
    "code": "",
    "test": "const evalCode = `${code}; return  min(a,b)`;\nconst min = new Function('a', 'b', evalCode).bind({});\ndescribe(\"min\", ()=>{function minTest(a,b) {let result; (a-b) < 0 ? result = a : result = b;it('при a = ' + a + ' и b = ' + b + ', меньшее ' + result,()=>{assert.equal(min(a,b), result);});} for(let a = -1; a <= 1; a++) {for(let b = -1; b <= 1; b++){ minTest(a,b);}}});"
  },
  {
    "id": 4,
    "name": "Факториал числа n!",
    "complexity": "basic",
    "description": "Напишите функцию factorial(n), которая возвращает факториал числа n!, используя рекурсивный вызов.",
    "code": "",
  },
  {
    "id": 5,
    "name": "Вывод чисел каждые 100 мс",
    "complexity": "medium",
    "description": "Напишите функцию printNumbersInterval(), которая последовательно выводит в консоль числа от 1 до 20, с интервалом между числами 100 мс. То есть, весь вывод должен занимать 2000 мс, в течение которых каждые 100 мс в консоли появляется очередное число.",
    "code": "",
  "test": "const evalCode = `${code}; return printNumbersInterval()`;\nconst printNumbersInterval = new Function( evalCode).bind({});\ndescribe(\"printNumbersInterval\",()=>{function printNumbersIntervalTest() { function printNumbersInterval() {let i = 1;let timerId = setInterval(function() {console.log(i);if (i == 20) clearInterval(timerId);i++;}, 100);};it('выводит в консоль числа от 1 до 20',()=> {assert.equal(printNumbersInterval());});} printNumbersIntervalTest();});"
  },
  {
    "id": 6,
    "name": "Первый символ - заглавный",
    "complexity": "medium",
    "description": "Напишите функцию ucFirst(str), которая возвращает строку str с заглавным первым символом.",
    "code": "",
  "test": "const evalCode = `${code}; return ucFirst(str)`;\nconst ucFirst = new Function('str', evalCode).bind({});\ndescribe(\"ucFirst\",()=>{function ucFirstTest(str) {let result; (!str) ? result=str : result= str[0].toUpperCase() + str.slice(1);it('при str = '+str+' ,возвращает ' + result,()=> {assert.equal(ucFirst(str), result);});} ucFirstTest('петя'); ucFirstTest('вася'); ucFirstTest('саша'); ucFirstTest('миша');});"
  "test": "const evalCode = `${code}; return  factorial(n)`;\nconst factorial  = new Function('n', evalCode).bind({});\ndescribe(\"factorial\", ()=>{function factorialTest(n) {let x;n?x=n* factorialTest(n-1): x=1;it('при n = ' + n + ' , вернуть' + x,()=>{assert.equal(factorial(n), x);});} for(let n = 0; n <= 5; n++) { factorialTest(n);}});"
},
{
  "id": 7,
  "name": "Фильтрация массива 'на месте'",
  "complexity": "hard",
  "description": "Создайте функцию filterRangeInPlace(arr, a, b), которая получает массив с числами arr и удаляет из него все числа вне диапазона a..b. То есть, проверка имеет вид a ≤ arr[i] ≤ b. Функция должна менять сам массив и ничего не возвращать.",
  "code": "",
  "test": "const evalCode = `${code}; return filterRangeInPlace(arr, a, b)`;\nconst filterRangeInPlace = new Function('arr', 'a','b', evalCode).bind({});\ndescribe(\"filterRangeInPlace\", ()=>{function filterRangeInPlaceTest(arr, a, b) { for (let i = 0; i < arr.length; i++) {let val = arr[i];if (val < a || val > b) {arr.splice(i--, 1);}};it('удаляет  все числа вне диапазона',()=>{assert.equal (filterRangeInPlace(arr, a, b));});} { const arr = [5, 3, 8, 1];filterRangeInPlace(arr, 1, 4);}});"
}
]
